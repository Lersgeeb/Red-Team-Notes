from Crypto.Util.number import getPrime, bytes_to_long
import math

print(f"prime: {getPrime(512)}")

phy = math.pow(getPrime(512) -1,2)  

print(f"phy: {phy}")


d = pow(65537, -1, int(phy))  # Modular inverse
print(f"d: {d}")


c = 120266872496180344790010286239079096230140095285248849852750641721628852518691698502144313546787272303406150072162647947041382841125823152331376276591975923978272581846998438986804573581487790011219372437422499974314459242841101560412534631063203123729213333507900106440128936135803619578547409588712629485231
n = 144984891276196734965453594256209014778963203195049670355310962211566848427398797530783430323749867255090629853380209396636638745366963860490911853783867871911069083374020499249275237733775351499948258100804272648855792462742236340233585752087494417128391287812954224836118997290379527266500377253541233541409

M = pow(c, d, n)
print(f"Decrypted message (decimal): {M}")

